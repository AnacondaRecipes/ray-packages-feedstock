{% set version = "2.0.1" %}

package:
  name: ray-packages
  version: {{ version }}

source:
  url: https://github.com/ray-project/ray/archive/ray-{{ version }}.tar.gz
  sha256: b8b2f0a99d2ac4c001ff11c78b4521b217e2a02df95fb6270fd621412143f28b
  patches:
    - patches/0003-Redis-deps-now-build-but-do-not-link.patch
    - patches/0004-Disable-making-non-core-entry-scripts.patch
    - patches/0010-Remove-all-dependencies-from-setup.py.patch
    - patches/0011-Ignore-warnings-in-event.cc-and-logging.cc.patch
    - patches/0013-Add-bazel-linkopts-libs.patch

build:
  number: 0
  # py36 is technically supported but we don't want to build for it
  skip: true  # [py<37]
  # skipping architectures that do not yet have bazel, so only build for linux64 & win64
  skip: true  # [osx]
  skip: true  # [not (x86_64 or win)]

# Need these up here for conda-smithy to handle them properly.
requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - git
    - bazel ==4.2.2
    - cython ==0.29.28
    - curl
    - make           # [not win]
    - patch          # [not win]
    - m2-make        # [win]
    - m2-patch       # [win]

outputs:
  - name: ray-all
    build:
      # Until all of the ray-* packages are available in defaults, skipping the ray-all metapackage.
      skip: true
    requirements:
      host:
      run:
        - python
        - {{ pin_subpackage('ray-default', exact=True) }}
        # autoscaler is completely disabled for now as it's missing a bunch of dependencies
        # and there's not much interest in adding them (yet).
        # autoscaler does not work on Windows, no point of building it; see below
        # - {{ pin_subpackage('ray-autoscaler', exact=True) }}  # [not win]
        - {{ pin_subpackage('ray-dashboard', exact=True) }}
        # - {{ pin_subpackage('ray-debug', exact=True) }}  # turned off for now, see below
        - {{ pin_subpackage('ray-k8s', exact=True) }}
        - {{ pin_subpackage('ray-rllib', exact=True) }}
        - {{ pin_subpackage('ray-serve', exact=True) }}
        - {{ pin_subpackage('ray-tune', exact=True) }}
    test:
      imports:
        # dummy test; actual tests are in subpackages
        - ray

  - name: ray-core
    script: build-core.sh  # [not win]
    script: build-core.bat  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - bazel ==4.2.2
        - sysroot_linux-64 2.17  # [linux and x86_64]
        - curl
        - cython ==0.29.28
        - make      # [not win]
        - m2-make   # [win]
        - python  
      host:
        - python
        - pip
        - packaging
        # pickle5 needs to be here, otherwise setup.py tries
        # to install it and it fails on conda-forge Windows CI
        - pickle5  # [py<38]
      run:
        - python
        - aiosignal
        - attrs
        - click >=7.0, <=8.0.4
        - colorama
        - dataclasses  # [py<37]
        - filelock
        - frozenlist
        - grpcio >=1.28.1,<1.48
        - jsonschema
        - msgpack-python >=1.0.0, <2.0.0
        - numpy >=1.16 # [py<39]
        - numpy >=1.19.3 # [py>=39]
        - pickle5  # [py<38]
        - protobuf >=3.15.3,<4.0.0
        - psutil
        - pyyaml
        - redis-py >=3.5.0
        - requests
        - setproctitle =1.2.2
        - typing_extensions  # [py<38]
        - virtualenv

    test:
      imports:
        - ray
        - ray._raylet
        - ray.actor
        - ray.runtime_context
        - ray._private.state
        - ray._private.worker
      commands:
        - python -c "import ray; ray.init()"

  - name: ray-default
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('ray-core', exact=True) }}
        - aiohttp >=3.7
        - aiohttp-cors
        - aioredis <2
        - colorful
        # gpustat has a dependency which does not exist on Windows;
        # skip it there until gpustat is fixed as it is optional.
        - gpustat  # [not win]
        - opencensus
        - prometheus_client >=0.7.1,<0.14.0
        - jsonschema
        - requests
        - smart_open
        - py-spy >=0.2.0

    test:
      imports:
        # ray-default is a convenience wrapper with no imports of its own
        - ray
        # init-code seemingly depends on platform or other ambient things;
        # the following doesn't get triggered in CI, but was a problem in
        # https://github.com/conda-forge/ray-packages-feedstock/issues/16
        - ray._private.metrics_agent

  - name: ray-autoscaler
    build:
      # skip autoscaler altogether because right now it's missing a lot of dependencies
      # and no one has volunteered to update those
      skip: true
      # ray autoscaler relies heavily on using POSIX-compliant OpenSSH and rsync,
      # neither of which are available on Windows; they are in WSL, but that is
      # effectively a Linux version from conda point of view
      skip: true  # [win]
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('ray-core', exact=True) }}
        - azure-cli-core ==2.4.0
        - azure-mgmt-compute ==12.0.0
        - azure-mgmt-msi ==1.0.0
        - azure-mgmt-network ==10.1.0
        - boto3 ==1.4.8
        - google-api-python-client ==1.7.8
        - google-auth
        - kubernetes
    test:
      imports:
        - ray.autoscaler

  - name: ray-dashboard
    build:
      skip: true
      script:
        - cd python/ray/dashboard/client
        - npm install
        - npm ci
        - npm run build
        # not sure why this seems to get copied on windows but not linux...
        - mkdir -p $SP_DIR/ray/dashboard/client             # [not win]
        - cp -R ./build $SP_DIR/ray/dashboard/client/build  # [not win]
    requirements:
      host:
        - nodejs
        - python
      run:
        - python
        - {{ pin_subpackage('ray-default', exact=True) }}
    test:
      imports:
        - ray.dashboard
      commands:
        - python -c "import ray; ray.init(include_dashboard=True)"

  - name: ray-debug
    build:
      # some weird incompatibility when installing during tests... disabling for now
      # wild guess is it is caused by py-spy using newer sysroot/glibc
      skip: true
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('ray-core', exact=True) }}
        - py-spy >=0.2.0
    test:
      imports:
        # there doesn't appear to be a debug specific module
        - ray

  - name: ray-k8s
    build:
      # Holding off on ray-k8s. defaults does not contain the kubernetes package and there is a bit
      # to bring in for this.
      skip: true
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('ray-core', exact=True) }}
        - kubernetes
        - urllib3
    test:
      imports:
        # there doesn't appear to be a k8s module, not sure how to test this
        - ray

  - name: ray-rllib
    build:
      # Holding off on ray-rllib until we update to newer version. The dependencies have been
      # cleaned up quite a bit and no longer require gym-atari & atari_py:
      # https://github.com/ray-project/ray/blob/55709bac7a6577b57a76cfcc6b295eda2468acad/python/setup.py#L103
      skip: true
      entry_points:
        - rllib = ray.rllib.scripts:cli
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('ray-tune', exact=True) }}
        - dm-tree
        - gym
        - lz4
        - matplotlib !=3.4.3
        # scikit-image uses a deprecated import for pooch, causing rllib to fail on import
        # pinning pooch to <1.5 solves this issue for now
        - pooch <1.5
        - pyyaml
        - scikit-image
        - scipy

    test:
      imports:
        - ray.rllib
      commands:
        - rllib --help

  - name: ray-serve
    build:
      # Holding off on ray-serve as well for this release. uvicorn would bring in a number of
      # dependencies not yet available in defaults: watchgod, websockets 8.*, httptools 0.1.*, and
      # python-dotenv.
      skip: true
      entry_points:
        - serve = ray.serve.scripts:cli
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('ray-core', exact=True) }}
        - uvicorn
        - requests
        - starlette
        - fastapi
    test:
      imports:
        - ray.serve

  - name: ray-tune
    build:
      skip: true
      entry_points:
        - tune = ray.tune.scripts:cli
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('ray-core', exact=True) }}
        - pandas
        - requests
        - tabulate
        - tensorboardX >=1.9
    test:
      imports:
        - ray.tune

about:
  home: https://www.ray.io/
  license: Apache-2.0
  license_family: Apache
  license_file:
    - LICENSE
    - licenses/abseil-LICENSE.txt
    - licenses/antirez-redis-COPYING.txt
    - licenses/arrow-LICENSE.txt
    - licenses/boost-LICENSE_1_0.txt
    - licenses/boringssl-LICENSE.txt
    - licenses/deckarep-golang-set-LICENSE.txt
    - licenses/flatbuffers-LICENSE.txt
    - licenses/gabime-spdlog-LICENSE.txt
    - licenses/gflags-COPYING.txt
    - licenses/glog-COPYING.txt
    - licenses/go-logr-LICENSE.txt
    - licenses/googletest-LICENSE.txt
    - licenses/grpc-LICENSE.txt
    - licenses/msgpack-COPYING.txt
    - licenses/onsi-ginkgo-LICENSE.txt
    - licenses/onsi-gomega-LICENSE.txt
    - licenses/opencensus-LICENSE.txt
    - licenses/opencensus-proto-LICENSE.txt
    - licenses/prometheus-LICENSE.txt
    - licenses/redis-hiredis-COPYING.txt
    - licenses/tporadowski-redis-license.txt
    - licenses/zlib-LICENSE.txt
  summary: Ray is a fast and simple framework for building and running distributed applications.
  description: |
    Ray is a fast and simple framework for building and running
    distributed applications.
  doc_url: https://docs.ray.io/en/latest/
  dev_url: https://github.com/ray-project/ray

extra:
  recipe-maintainers:
    - dHannasch
    - h-vetinari
    - vnlitvinov
    - krfricke
